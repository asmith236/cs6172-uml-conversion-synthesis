------ TODO ------

1. Write python script that anonymizes an input XML file
2. Execute summer conversion script on anonymized data file to generate known output
3. Establish test cases
4. Test various implementations on test cases and output a graph showing which implementations failed/succeeded at each test case

Implementations to test...
1. HW 1 Flashfill
2. LLM (inputs-outputs -> code)
3. LLM (inputs-outputs -> new input-output)
4. Bottom up enumeration
5. Advanced Flashfill


------ Notes from Prof ------

It would be valuable (and easy) to also try using LLMs in one of two ways:

1. Prompting them with input-outputs and asking them to write the code that will accomplish the transformation
2. Prompting them with input-outputs, plus a test input that you would like to transform, and asking them to predict what the transformed output should be for that test input


------ Notes for Report ------

** Test Success = Output file imports into MagicDraw

1. Tests on hw1 flashfill()...
   Test case 1 fails - outputs "ran synthesizer in time 7.433286905288696 seconds", but fails to output the version space size and the viable program after 30 mins (likely due to the version space being too large)
   Test case 2 fails - ...

2. Test using LLM...

The task is to convert an XML element from version 1 to version 2. Here is an example transformation:

Input:
<ownedComment xmi:id="_0-3eYuRbEduVs91jndUPVw" annotatedElement="_383AC7D3023A40C0CE87009D">
  <body>This is body gemonies d4143d60.</body>
</ownedComment>

Output:
<ownedComment xmi:id="_0-3eYuRbEduVs91jndUPVw" body="This is body gemonies d4143d60." annotatedElement="_383AC7D3023A40C0CE87009D" />

Now, transform the following input XML:
<Input XML Here>


------ Scratch ------

input = '''
        <root root_attr="root_value">
            <level1>
                <body>body text</level2>
            </level1>
        </root>
    '''

output = '''
        <root root_attr="root_value">
            <level1 body="body text"/>
        </root>
    '''


input = ET.Element("root", {"root_attr": "root_value"})
level1 = ET.SubElement(input, "level1")
body = ET.SubElement(level1, "body")
body.text = "body text"

output = ET.Element("root", {"root_attr": "root_value"})
level1 = ET.SubElement(output, "level1", {"body": "body text"})

XMLTag(level, tag, attribute_list, content)...
XMLTag(1, "root", [("root_attr", "root_value")], none) + XMLTag(2, "level1", none, none) + XMLTag(3, "body", none, "body text")

XMLTag(tag, attribute_list, content, child)...
XMLTag("root", [("root_attr", "root_value")], none, XMLTag("level1", none, none, XMLTag("body", none, "body text", none)))
XMLTag("root", [("root_attr", "root_value")], none, XMLTag("level1", [("body", "body text")], none, none))

XMLTag(tag, attribute_list, content, child)...
ConstantString("text")...
XMLTag(ConstantString("root"), [(ConstantString("root_attr"), ConstantString("root_value"))], none, XMLTag(ConstantString("level1"), none, none, XMLTag(ConstantString("body"), none, ConstantString("body text"), none)))
XMLTag(ConstantString("root"), [(ConstantString("root_attr"), ConstantString("root_value"))], none, XMLTag(ConstantString("level1"), [(ConstantString("body"), ConstantString("body text"))], none, none))

XMLTag(ConstantString("packagedElement"), [(ConstantString("name"), ConstantString("Name1"))], none, XMLTag(ConstantString("ownedAttribute"), none, none, XMLTag(ConstantString("body"), none, ConstantString("This is content."), none)))
XMLTag(ConstantString("packagedElement"), [(ConstantString("name"), ConstantString("Name1"))], none, XMLTag(ConstantString("ownedAttribute"), [(ConstantString("body"), ConstantString("This is content."))], none, none))


XMLTag
ConstantString


LLM Output Transformation:

The task is to convert an XML element from version 1 to version 2. Below are example transformations:

Transformation 1:

Input:
<packagedElement name="expects_cachoeira"></packagedElement>

Output:
<packagedElement name="expects_cachoeira" visibility="public"></packagedElement>

Transformation 2:

Input:
<ownedComment annotatedElement="_383AC7D3023A40C0CE87009D">
  <body>This is body gemonies d4143d60.</body>
</ownedComment>

Output:
<ownedComment annotatedElement="_383AC7D3023A40C0CE87009D" body="This is body gemonies d4143d60." />

Transformation 3:

Input:
<packagedElement type="uml:Class" id="_383AC7D3023A40C0CE87009D" name="expects_cachoeira">
  <ownedComment id="_0-3eYuRbEduVs91jndUPVw" annotatedElement="_383AC7D3023A40C0CE87009D">
    <body>This is body d4143d60.</body>
  </ownedComment>
</packagedElement>

Output:
<packagedElement type="uml:Class" id="_383AC7D3023A40C0CE87009D" name="expects_cachoeira" visibility="public">
  <ownedComment id="_0-3eYuRbEduVs91jndUPVw" body="This is body d4143d60." annotatedElement="_383AC7D3023A40C0CE87009D" />
</packagedElement>

Transformation 4:

Input:
<packagedElement type="uml:Class" id="_383AC7D3023A40C0CE87009D" name="expects_cachoeira">
  <eAnnotations id="_0-3eZeRbEduVs91jndUPVw" source="http://www.eclipse.org/uml2/2.0.0/UML">
    <details id="_0-3eZuRbEduVs91jndUPVw" key="entity" />
  </eAnnotations>
</packagedElement>

Output:
<packagedElement type="uml:Class" id="_383AC7D3023A40C0CE87009D" name="expects_cachoeira"></packagedElement>

Now, transform the following input XML:

<packagedElement type="uml:Class" id="_TYwJQFb6Ed-xTsassymaRA" name="safely_nimmed">
  <eAnnotations id="_0gKwMORbEduVs91jndUPVw" source="http://www.eclipse.org/uml2/2.0.0/UML">
    <details id="_0gxNKuRbEduVs91jndUPVw" key="entity" />
  </eAnnotations>
  <ownedComment id="_383AC7D3023A3F097A88029B" annotatedElement="_TYwJQFb6Ed-xTsassymaRA">
    <body>This is body d4128197.</body>
  </ownedComment>
  <ownedAttribute id="_383AC7D3023A40C0CEBF005E" name="unsteep_commaes" visibility="private" />
  <ownedAttribute id="_383AC7D3023A40C0CE9C0271" name="polarography_palirrhea"
    visibility="public" type="_383AC7D3023A40C0CAFC0106" isUnique="false" aggregation="shared"
    association="_383AC7D3023A40C0CE9B034C" />
</packagedElement>




LLM Output Program:

The task is to write a program that will always convert an XML element from version 1 to version 2. Below are example transformations:

Transformation 1:

Input:
<packagedElement name="expects_cachoeira"></packagedElement>

Output:
<packagedElement name="expects_cachoeira" visibility="public"></packagedElement>

Transformation 2:

Input:
<ownedComment annotatedElement="_383AC7D3023A40C0CE87009D">
  <body>This is body gemonies d4143d60.</body>
</ownedComment>

Output:
<ownedComment annotatedElement="_383AC7D3023A40C0CE87009D" body="This is body gemonies d4143d60." />

Transformation 3:

Input:
<packagedElement type="uml:Class" id="_383AC7D3023A40C0CE87009D" name="expects_cachoeira">
  <ownedComment id="_0-3eYuRbEduVs91jndUPVw" annotatedElement="_383AC7D3023A40C0CE87009D">
    <body>This is body d4143d60.</body>
  </ownedComment>
</packagedElement>

Output:
<packagedElement type="uml:Class" id="_383AC7D3023A40C0CE87009D" name="expects_cachoeira" visibility="public">
  <ownedComment id="_0-3eYuRbEduVs91jndUPVw" body="This is body d4143d60." annotatedElement="_383AC7D3023A40C0CE87009D" />
</packagedElement>

Transformation 4:

Input:
<packagedElement type="uml:Class" id="_383AC7D3023A40C0CE87009D" name="expects_cachoeira">
  <eAnnotations id="_0-3eZeRbEduVs91jndUPVw" source="http://www.eclipse.org/uml2/2.0.0/UML">
    <details id="_0-3eZuRbEduVs91jndUPVw" key="entity" />
  </eAnnotations>
</packagedElement>

Output:
<packagedElement type="uml:Class" id="_383AC7D3023A40C0CE87009D" name="expects_cachoeira"></packagedElement>

Now, write a program that accepts an input XML element and outputs the transformed element.